# Standard configuration file
#
# Control parameters of the MC ray-tracing code
# ---

#############################################################################
# TOKAMAK PARAMETERS AND EQUILIBRIUM
#############################################################################

equilibrium = 'Tokamak'

# major and minor radius of the tokamak
rmaj = 88.
rmin = 25.

equilibriumdirectory                    = 'input/'

# This optional parameter allow the user to extrapolate the equilibrium grid
# when its boundary is very close to the separatrix. This may happen in
# tokamaks like TCV. The parameter must be a tuple of integers (ne, nw, nn, ns)
# and the grid is extended by ne points on the left (east), nw points on the
# right (west), nn points up (north) and ns points down (south).
# This is just an example... Not used for ITER in standard runs.

extend_grid_by                          = (0, 0, 0, 0)

#############################################################################
# OUTPUT PARAMETERS
#############################################################################
# directory, where the result file is written
output_dir                              = 'output/'
# output filename
output_filename                         = 'Test'

# if true, the first ray to be traced is the central, most probable one.
takecentralrayfirst = True                     
# specify which information is stored in the output file
storeNxNyNz = True
storeNparallelphiN = True			 
storeGroupVelocity = True
storeCorrectionFactor = True
storePsi = True
storeTheta = True
dispersionSurfacesOnCentralRay = 'dispersion.hdf5' # set to output filename
# print progress
ControlOutput = True
# print every ...-th ray traced, if not defined set to 100
PrintNmbrRays = 200

# For testing there is the option to freeze the random numbers
freeze_random_numbers                   = False

#############################################################################
# BEAM PARAMETERS
#############################################################################
freq                                    = 84
sigma                                   = -1.

# beamwidth in cm
beamwidth1                              = 2.087
beamwidth2                              = 2.087

# curvature radius
curvatureradius1                        =  79.58
curvatureradius2                        = 79.58

# central antenna starting point coordinates in cm
rayStartX                               = 122.99
rayStartY                               = -4.29
rayStartZ                               = -0.30

# antenna oriantation angles in degree
antennatordeg                           = -14.0
antennapoldeg                           = -0.157
anglespecification                      = 'ASDEX'

# usually should be set to zero. Used to launch rays with some angle to the antenna plane.
centraleta1 = 0.            
centraleta2 = 0.


#############################################################################
# SOLVER AND RAY TRACING PARAMETERS
#############################################################################
# number of integration steps. The integration can be aborded before due to 
# absorption or leaving the plasma. See the corresponding parameters below
npt = 10000

# timestep for the integration                                      				 
timestep = 0.1

# regularisation parameter for Hamiltonian 
# in case of UH-resonance
epsilonRegS = 1e-8

# max. number of integration steps 
# for Runge-Kutta solver
integratormaxnmbrsteps = 1500

# max. rel. tolerance for solver
integratorreltol = 1e-7

# max. abs. tolerance for solver
integratorabstol = 1e-7

# number of rays to trace
nmbrRays                                = 1000

# number of random numbers generated
# in order to initialise the Metropolis-
# Hastings alogrithm for the ray launching
nmbrMetrHastBoundaryInit = 10000

#############################################################################
# SPECIAL CONDITIONS 
#############################################################################
# Absorption
absorption                              = True

# in case, plasma is considered
# 0 --> Westerhof absorption routine used
# 1 --> Farina absorption routine used
absorptionModule = 1

# for generic Hamiltonians
absorptionLayerX = 120.

# specify, how long before the last absorption started
# it is started to compute the absorption coefficient.
# Before it is set to 0.
# put 0 if you wish to compute absorption from 0 on 
absorptionStartEarlierThenCentralRay = 2.

# treshhold when absorption is considered to
# be non-negligible.
absorptionConsiderAsNonZeroTreshhold = 1.e-1

# when it is assumed that there is absorption,
# smaller timesteps are chosen.
absorptionSmallerTimestepsFactor = 10.

# determines when the ray tracing is stopped 
# because the Wfct is too small and does not 
# contribute any more.
# relative to the Wfct of the central ray.
absorptionWfctTreshhold = 1e-4
  
# Reflektometrie
# if turned on, detects when the rays 
# are leaving the plasma and stopps ray tracing
# using the treshhold below
reflektometrie = True

# rho when tracing is stopped.
reflektometrierhoTreshhold = 1.0

#############################################################################
# SCATTERING
#############################################################################
# set True in the following line if you wish to turn on the scattering.
scattering                              = True

# set True in the following line if you wish to take into account
# cross-polarization scattering
CrossPolarizationScatt = False

# set True in the following line if Gaussian scattering model is wished
# (compare master thesis), 
# in case False is set, the model from M. W. Shafer is implemented
scatteringGaussian = True
# Controlling the model of Shafer et al.
scatteringLambda = -1. # interpolate between different models
scatteringDelta = 0.1  # width in rho poloidal of the scattering layer
scatteringrhocentral = 1. # position of the layer in rho poloidal

# set the parameters used for the model for plasma
#######################################################################
# the following parameters are used for the Gaussian-shaped model
# and also to determine the guess for the Poisson intensity
# (so please check if this guess is large enough)
# correlation length
scatteringLengthPerp                    = 'Lperp_rhos_model'
scatteringLengthParallel                = 10000.

# in the next line, a python lambda-function is defined, which serves as a model
# defining the square root of the relative electron density fluctuation variance
#scatteringDeltaneOverne = lambda ne,rho,theta: 0.6*math.exp(-(rho-0.95)**2 / 0.15**2) 
scatteringDeltaneOverne                 = 'fluct_amplitude'

# For the model of Shafer et al. this should be replaced by a flot
#scatteringDeltaneOverne = 0.1 # 10% fluctuation level

# factor the max. scattering
# probab. is multiplied with.
# if the exceeded counter is 
# not 0 after the run, increase
# this factor.
scatteringMaxProbGuessFactor = 5.

scatteringintegrationboundaryfactor = 5.
nmbrinitialisationMetropolisHastingsScattering = 1000

# the following parameters are uniquely used in the model copied
# from Shafer (2012)
scatteringLcz = 2.
scatteringLcr = 2.
scatteringkz = 0.7
#######################################################################

#############################################################################
# ANALYTICAL MODELS FOR TESTS
#############################################################################
# take vanishing ne and completly toroidal magnetic field
# must also be set True for the models linear layer and valley 
# (lense like medium)
linearlayer = False
valley = False
# set parameter for the models
linearlayervalleyL = 90.
# use an analytical model for the tokamak equilibrium
analytical_tokamak = 'No'                               
# specify the central electron density 
neanal = 10.	 
deltarhopedestal = 0.015    	
# if the following line is defined, the electron density is
# assumed constant for values of x smaller than the indicated number
# (to get the same model as in the full wave solver)
cuteldensAt = 812.			   

# if set to true, the 2D problem is considered 
# (i.e. Y=0, Ny=0 for the whole ray)
twodim = False

beamView = False

vesselfile = '/home/devlamin/WKbeam_simulations/TCV_85352_0.9_fluct/input/85352_vessel.mat'