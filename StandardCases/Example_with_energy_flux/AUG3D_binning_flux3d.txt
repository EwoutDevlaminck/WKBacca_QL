# Example for ASDEX Upgrade shot number 25485
# Case with Gaussian turbulence: 10% maximum density fluctuations.
#
# Control parameters for processing the electric field amplitude
# ---


###############################################################################
# INPUT PARAMETERS FOR THE BINNING
###############################################################################

# INPUT AND OUTPUT FILES
##########################################################################
# Corresponding ray tracing file
raytracing_input = 'StandardCases/Example_with_energy_flux/AUG3D_raytracing.txt'

# the ray trace data used to bin
equilibriumdirectory = 'StandardCases/Example_with_energy_flux/input/'
inputdirectory = 'StandardCases/Example_with_energy_flux/output/'

# name of the input file, 
# will be composed by what is indicated here and formal stuff
inputfilename = ['AUG3D']

# number of files, if more than one, not only the file that starts with
# rank0... is used.
nmbrFiles = 1

# directory, where the binned results are written
outputdirectory =  'StandardCases/Example_with_energy_flux/output/'

# output filename. If not defined, inputfilename is used and _binned attached 
outputfilename = ['AUG3D_binned_XYZ']
##########################################################################


# WHAT DIMENSIONS TO RESOLVE
##########################################################################
# IN THIS SECTION, YOU CAN CHOOSE WHICH DIMENSIONS SHALL BE RESOLVED.
# THE FOLLOWING CAN BE CHOSEN:
# X, Y, Z, Nx, Ny, Nz, Nparallel, phiN, Psi, rho, R
# THEY WILL BE ARRANGED IN THE ORDER GIVEN HERE.

WhatToResolve = ['X', 'Y', 'Z']

# here, you can choose the lower and upper boundaries:
min = [150., -15., 10.]
max = [250., +15., 50.]

# and the number of bins
nmbr = [500, 200, 300]
##########################################################################


# WHAT DATA TO PRODUCE
########################################################################## 
# IN THIS SECTION YOU CAN CHOOSE WHAT DATA SHALL BE PRODUCED.

# if the following line is defined, the electric field is normalised
# such that energy density / flow / power absorption is stored.
# if it is commented out, the electric field is normalised to 1
# at the central antenna position
InputPower = 1.

# put True in the next line if you wish to save the basic 
# Wfct result (binning weight 1)
storeWfct = True

# choose, if also velocity components shall be stored 
storeVelocityField = True

# in the next line, you can choose the velocity field components you want to 
# store in the list defined.
# They can be chosen out of Nx, Ny, Nz, Nparallel, phiN
VelocityComponentsToStore = ['Vx', 'Vy', 'Vz']

# put True in the following line if you wish to 
# store absorption
storeAbsorption = False
##########################################################################



# OPTIONS ON SCATTERING
##########################################################################
# put True in the next line if you wish to compute the total amplitude
# including scattered rays
computeAmplitude = True

# put True in the next line if you wish to compute the total amplitude
# of all rays which are not scattered
computeAmplitudeUnscattered = False

# put True in the next line if you wish to compute the effect of 
# scattering
computeScatteringEffect = False

# put True in the next line if you wish to compute the contribution of
# the scattered rays only
computeScatteredContribution = False

##########################################################################





# SOME ADDITIONAL OPTIONS
########################################################################## 
# put True in the next line if you wish to take into account the 
# correction factor to change from the Hamiltonian used in the
# ray tracing code to the physical one
correctionfactor = True

##########################################################################




# PLOTTING DIRECTIVES
##########################################################################
# Valid backends are 'matplotlib2d', 'matplotlib3d', mayavi3d'	
plotting_backend = 'mayavi3d'
#plotting_backend = 'data_only'
#plotting_backend = 'matplotlib3d'
#plotting_backend = 'matplotlib2d'

surface_model_path = 'StandardCases/Example_with_energy_flux/surfaces/'
#surface_model = 'plane_cross_section3d'
#surface_model = 'sphere'
surface_model = 'disk'
smoothing = 0.0 # spline smooting parameter s for the energy flux
skip = 5 # used by mayavi to avoid too dense plots
plotequilibrium = True
###write_energy_flux_data_to = 'flux_data.hdf5'
###colormap = 'jet'

##########################################################################
