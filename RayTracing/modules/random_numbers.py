"""
Procedures related to random number generators.
In WKBeam, random numbers are generated by numpy.random.
Each sequence of random number is generated by a numpy.random.RandomState
object. There are three such sequences:

 1) In mainorg.py, function mainorg, defines InitialRay_random_state
    which is used in the sampling of the initial condition. 
 2) Each scattering object has an independent RandomState object
 3) Each cython module for scattering has its own independent RandomState object.

For the specific case of cython modules however, the RandomState object is 
initialized without usign the procedures below.
"""

# Import statmente
import numpy as np


# Create an instance of numpy.random.RandomState
def create_numpy_random_state(freeze_seed, rank=0):

    """
    Return an instance of numpy.random.RandomState. 
    The flag freeze_seed is boolena and defines the seed of the random number
    generator: if true the seed of the random number generator is fixed, thus
    allowing for reproducible results.
    """
    
    if freeze_seed:
        random_state = np.random.RandomState(rank+1)
    else:
        randomseed = np.random.randint(1234)
        random_state = np.random.RandomState((rank+1)*randomseed)

    return random_state

